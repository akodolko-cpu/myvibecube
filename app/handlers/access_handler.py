from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode

from punq import Container
from app.services.access_service import AccessService


def register_access_handler(router: Router, container: Container):
    """Register access command handler"""
    
    @router.message(Command("access"))
    async def access_command(message: Message) -> None:
        """Handle /access command for user management."""
        access_service = container.resolve(AccessService)
        
        # Extract command arguments from message text
        command_parts = message.text.split()
        args = command_parts[1:] if len(command_parts) > 1 else []
        
        # Only admins can use this command
        if not access_service.is_admin(message.from_user.id):
            await message.answer("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        # Show usage if no args provided
        if len(args) < 3 or args[0] not in {"add", "set"}:
            usage_text = (
                "üìù <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:</b>\n\n"
                "‚Ä¢ <code>/access add &lt;telegram_id&gt; &lt;role&gt;</code> - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "‚Ä¢ <code>/access set &lt;telegram_id&gt; &lt;role&gt;</code> - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n\n"
                "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:</b>\n"
                "‚Ä¢ <code>admin</code> - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)\n"
                "‚Ä¢ <code>rop</code> - —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂\n"
                "‚Ä¢ <code>topmanager</code> - —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–µ—Ä\n"
                "‚Ä¢ <code>stm</code> - —Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä\n"
                "‚Ä¢ <code>prodavan</code> - –ø—Ä–æ–¥–∞–≤–µ—Ü"
            )
            await message.answer(usage_text, parse_mode=ParseMode.HTML)
            return

        action, tg_id_str, role_name = args[0], args[1], args[2]
        
        # Validate telegram ID
        if not tg_id_str.isdigit():
            await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return

        tg_id = int(tg_id_str)

        from infrastructure.database.connection import session_scope
        from infrastructure.database.repositories.user_repository import UserRepository
        from infrastructure.database.repositories.role_repository import RoleRepository

        with session_scope() as s:
            users = UserRepository(s)
            roles = RoleRepository(s)
            
            # Check if role exists
            role = roles.get_by_name(role_name)
            if role is None:
                await message.answer(f"‚ùå –†–æ–ª—å '{role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            # Get or create user
            user = users.get_by_tg_id(tg_id)
            if user is None:
                users.create(tg_id, None, None, role.id)
                await message.answer(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é <b>{role_name}</b>.",
                    parse_mode=ParseMode.HTML
                )
            else:
                users.set_role(user.id, role.id)
                await message.answer(
                    f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å <b>{role_name}</b>.",
                    parse_mode=ParseMode.HTML
                )

from __future__ import annotations
from telegram import Update
from telegram.ext import ContextTypes, CommandHandler

from app.middleware.access_middleware import require_access
from app.services.access_service import AccessService

access_service = AccessService()

@require_access("/access")
async def access_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Handle /access command for user management."""
    args = context.args or []
    
    # Only admins can use this command
    if not access_service.is_admin(update.effective_user.id):
        await update.effective_chat.send_message("‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
        return

    # Show usage if no args provided
    if len(args) < 3 or args[0] not in {"add", "set"}:
        usage_text = (
            "üìù **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**\n\n"
            "‚Ä¢ `/access add <telegram_id> <role>` - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
            "‚Ä¢ `/access set <telegram_id> <role>` - –∏–∑–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:**\n"
            "‚Ä¢ `admin` - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø)\n"
            "‚Ä¢ `rop` - —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂\n"
            "‚Ä¢ `topmanager` - —Ç–æ–ø-–º–µ–Ω–µ–¥–∂–µ—Ä\n"
            "‚Ä¢ `stm` - —Å—Ç–∞—Ä—à–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä\n"
            "‚Ä¢ `prodavan` - –ø—Ä–æ–¥–∞–≤–µ—Ü"
        )
        await update.effective_chat.send_message(usage_text, parse_mode='Markdown')
        return

    action, tg_id_str, role_name = args[0], args[1], args[2]
    
    # Validate telegram ID
    if not tg_id_str.isdigit():
        await update.effective_chat.send_message("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    tg_id = int(tg_id_str)

    from infrastructure.database.connection import session_scope
    from infrastructure.database.repositories.user_repository import UserRepository
    from infrastructure.database.repositories.role_repository import RoleRepository

    with session_scope() as s:
        users = UserRepository(s)
        roles = RoleRepository(s)
        
        # Check if role exists
        role = roles.get_by_name(role_name)
        if role is None:
            await update.effective_chat.send_message(f"‚ùå –†–æ–ª—å '{role_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # Get or create user
        user = users.get_by_tg_id(tg_id)
        if user is None:
            users.create(tg_id, None, None, role.id)
            await update.effective_chat.send_message(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} –¥–æ–±–∞–≤–ª–µ–Ω —Å —Ä–æ–ª—å—é **{role_name}**.",
                parse_mode='Markdown'
            )
        else:
            users.set_role(user.id, role.id)
            await update.effective_chat.send_message(
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ —Ä–æ–ª—å **{role_name}**.",
                parse_mode='Markdown'
            )

def get_handler():
    """Return the command handler for /access."""
    return CommandHandler("access", access_command)

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from punq import Container

from app.services.log_service import ActionLogService
from infrastructure.database.connection import get_db


async def logs_command_handler(message: Message, container: Container):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /logs (—Ç–æ–ª—å–∫–æ –¥–ª—è admin) - aiogram –≤–µ—Ä—Å–∏—è"""
    from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
    keyboard = [
        [InlineKeyboardButton(text="üìä –í—Å–µ –ª–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)", callback_data="logs_all")],
        [InlineKeyboardButton(text="‚úÖ –£—Å–ø–µ—à–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã", callback_data="logs_success")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–∫–∞–∑—ã –≤ –¥–æ—Å—Ç—É–ø–µ", callback_data="logs_denied")],
        [InlineKeyboardButton(text="üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="logs_user_added")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="logs_user_deleted")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="logs_cancel")],
    ]
    reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
    
    await message.answer("üìã –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ª–æ–≥–æ–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:", reply_markup=reply_markup)


async def logs_callback_handler(query: CallbackQuery, container: Container):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback‚Äô–æ–≤ –¥–ª—è /logs"""
    db = next(get_db())
    log_service = ActionLogService(db)
    
    if query.data == "logs_all":
        logs = log_service.get_all_logs(limit=50)
        if not logs:
            await query.message.edit_text("üì≠ –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        log_text = "üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 –ª–æ–≥–æ–≤:\n\n"
        for log in logs:
            user_name = log.user.full_name if hasattr(log, 'user') and log.user else "Unknown"
            log_text += f"‚Ä¢ {log.created_at.strftime('%Y-%m-%d %H:%M:%S')} - {user_name} - {log.action_type}"
            if log.command_name:
                log_text += f" ({log.command_name})"
            log_text += "\n"
        await query.message.edit_text(log_text[:4000])
        
    elif query.data in ["logs_success", "logs_denied", "logs_user_added", "logs_user_deleted"]:
        action_type_map = {
            "logs_success": "command_executed",
            "logs_denied": "command_denied",
            "logs_user_added": "user_added",
            "logs_user_deleted": "user_deleted"
        }
        action_type = action_type_map[query.data]
        
        logs = log_service.get_all_logs(action_type=action_type, limit=30)
        if not logs:
            await query.message.edit_text(f"üì≠ –õ–æ–≥–∏ —Å —Ç–∏–ø–æ–º '{action_type}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
            
        log_text = f"üìã –õ–æ–≥–∏ (—Ç–∏–ø: {action_type}):\n\n"
        for log in logs:
            user_name = log.user.full_name if hasattr(log, 'user') and log.user else "Unknown"
            log_text += f"‚Ä¢ {log.created_at.strftime('%Y-%m-%d %H:%M:%S')} - {user_name}\n"
        await query.message.edit_text(log_text[:4000])
        
    elif query.data == "logs_cancel":
        await query.message.edit_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ")

    await query.answer()


def register_logs_handler(router: Router, container: Container):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ /logs"""
    
    # –ö–æ–º–∞–Ω–¥–∞ /logs
    @router.message(Command("logs"))
    async def logs_command(message: Message):
        await logs_command_handler(message, container)
    
    # Callback‚Äô—ã –¥–ª—è –º–µ–Ω—é –ª–æ–≥–æ–≤
    @router.callback_query(lambda c: c.data and c.data.startswith('logs_'))
    async def logs_callback(query: CallbackQuery):
        await logs_callback_handler(query, container)

from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode

from punq import Container

from infrastructure.database.connection import session_scope
from infrastructure.database.repositories.user_repository import UserRepository
from app.services.log_service import ActionLogService


BLOCKED_CACHE: set[int] = set()


def register_start_handler(router: Router, container: Container):
    """Register start command handler"""

    @router.message(Command("start"))
    async def start_command(message: Message) -> None:
        tg_id = message.from_user.id

        # –ï—Å–ª–∏ —É–∂–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞–Ω–µ–µ ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω–æ
        if tg_id in BLOCKED_CACHE:
            return

        # –ü—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        with session_scope() as s:
            users = UserRepository(s)
            user = users.get_by_tg_id(tg_id)
            if user is None:
                BLOCKED_CACHE.add(tg_id)
                # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–∫–∞–∑
                ActionLogService(s).log_command_denied(tg_id, "/start", reason="user_not_registered")
                await message.answer("‚ùå –¢—ã –Ω–∏–∫—Ç–æ. –ù–∞—Ö–µ—Ä —Å –ø–ª—è–∂–∞.")
                return

            # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start
            ActionLogService(s).log_command_executed(tg_id, "/start", success=True)

        welcome_text = (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
            "ü§ñ –Ø MyVibe Bot - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã!\n\n"
            "üìä –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/access - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º (admin)\n"
            "/logs - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ (admin)\n\n"
            "‚ú® –ò—Å–ø–æ–ª—å–∑—É—é aiogram + punq DI + SQLAlchemy!"
        )
        await message.answer(welcome_text, parse_mode=ParseMode.HTML)
